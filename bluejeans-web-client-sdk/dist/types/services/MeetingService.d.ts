import { VideoLayout, VideoState, ConnectionState, MeetingInformation, BlueJeansSDKInitParams, RecordingState } from '../sdk-objects';
import { PermissionService } from "./PermissionService";
import { ParticipantService } from "./ParticipantService";
import { ContentShareService } from './ContentShareService';
import Analytics from './Analytics';
import { SDKLogger } from "../logger";
import { PublicChatService } from './PublicChatService';
import { PrivateChatService } from './PrivateChatService';
import { ModeratorControlsService } from "./ModeratorControlsService";
export declare const ZINC_MODE_ATTRIBUTE = "data-bjn-zinc-mode";
export declare class MeetingService {
    private permissionService;
    private _streamHelper;
    private environments;
    participantService: ParticipantService;
    contentService: ContentShareService;
    publicChatService: PublicChatService;
    privateChatService: PrivateChatService;
    moderatorControlsService: ModeratorControlsService;
    connectionState: ConnectionState;
    private cluster;
    private analytics;
    private sdkLogger;
    private activateCamOnFG;
    private initRemoteVid;
    private initParams;
    private remoteVideoElement;
    private autoplayHandler;
    private sequinAudioPromptsManager;
    private browserType;
    constructor(permissionService: PermissionService, analytics: Analytics, sdkLogger: SDKLogger, initParams: BlueJeansSDKInitParams);
    private handleAutoPlayforMediaNodes;
    private setConnectionState;
    private handleMobileBrowsersBg;
    private handleZincNoVideoScreen;
    private attachStreamType;
    private createNoVideoOverlayForZincMode;
    private setCluster;
    attachLocalVideo(videoElement: HTMLElement): void;
    attachRemoteVideo(remoteVideoElement: HTMLDivElement): void;
    private initSequinLayouts;
    private resetAppOnMeetingEnd;
    private disconnectMedia;
    attachRemoteContent(videoElement: HTMLElement): void;
    get selfVideoPreviewEnabled(): boolean;
    setSelfVideoPreviewEnabled(enable: boolean): void;
    private addSpeakerPlayerNodes;
    joinMeeting(meetingID: string, passcode: string | undefined, displayName: string): Promise<void>;
    private getVersionString;
    private getClientInfo;
    get videoState(): VideoState;
    get audioMuted(): boolean | null;
    get videoMuted(): boolean | null;
    setVideoLayout(videoLayout: VideoLayout): void;
    setName(name: string): void;
    setVideoMuted(muted: boolean): void;
    setAudioMuted(muted: boolean): void;
    get videoLayout(): VideoLayout | null;
    get meetingInformation(): MeetingInformation;
    get showVideoLayout(): boolean;
    endMeeting(ejectAndEnd?: boolean): Promise<any>;
    observe(property: keyof MeetingService, callback: () => void): void;
    private onMeetingJoined;
    get recordingState(): RecordingState;
}
